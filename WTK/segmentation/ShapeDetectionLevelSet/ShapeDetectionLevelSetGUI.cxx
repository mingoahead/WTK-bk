// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "ShapeDetectionLevelSetGUI.h"

void ShapeDetectionLevelSetGUI::cb_inputImageButton_i(fltk::LightButton*, void*) {
  this->ShowInputImage();
}
void ShapeDetectionLevelSetGUI::cb_inputImageButton(fltk::LightButton* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_inputImageButton_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Shape_i(Fl_Button*, void*) {
  this->RunShapeDetection();
}
void ShapeDetectionLevelSetGUI::cb_Shape(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_Shape_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_thresholdedImageButton_i(fltk::LightButton*, void*) {
  this->ShowThresholdedImage();
}
void ShapeDetectionLevelSetGUI::cb_thresholdedImageButton(fltk::LightButton* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_thresholdedImageButton_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_thresholdedImageVTKButton_i(fltk::LightButton*, void*) {
  this->ShowThresholdedImageWithVTK();
}
void ShapeDetectionLevelSetGUI::cb_thresholdedImageVTKButton(fltk::LightButton* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_thresholdedImageVTKButton_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Threshold_i(Fl_Button*, void*) {
  m_ThresholdFilter->Update();
}
void ShapeDetectionLevelSetGUI::cb_Threshold(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_Threshold_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_outputLevelSetButton_i(fltk::LightButton*, void*) {
  this->ShowOutputLevelSet();
}
void ShapeDetectionLevelSetGUI::cb_outputLevelSetButton(fltk::LightButton* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_outputLevelSetButton_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Gradient_i(Fl_Button*, void*) {
  this->ComputeGradientMagnitude();
}
void ShapeDetectionLevelSetGUI::cb_Gradient(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_Gradient_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_gradientMagnitudeButton_i(fltk::LightButton*, void*) {
  this->ShowGradientMagnitudeImage();
}
void ShapeDetectionLevelSetGUI::cb_gradientMagnitudeButton(fltk::LightButton* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_gradientMagnitudeButton_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Linear_i(Fl_Button*, void*) {
  this->ComputeEdgePotential();
}
void ShapeDetectionLevelSetGUI::cb_Linear(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_Linear_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_edgePotentialButton_i(fltk::LightButton*, void*) {
  this->ShowEdgePotentialImage();
}
void ShapeDetectionLevelSetGUI::cb_edgePotentialButton(fltk::LightButton* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_edgePotentialButton_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_sigmaValueInput_i(Fl_Value_Input* o, void*) {
  m_DerivativeFilter->SetSigma( o->value() );
}
void ShapeDetectionLevelSetGUI::cb_sigmaValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_sigmaValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_zeroSetValueInput_i(Fl_Value_Input* o, void*) {
  this->SetZeroSetValue( o->value() );
}
void ShapeDetectionLevelSetGUI::cb_zeroSetValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_zeroSetValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Clear_i(Fl_Button*, void*) {
  this->ClearSeeds();
}
void ShapeDetectionLevelSetGUI::cb_Clear(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_Clear_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Fast_i(Fl_Button*, void*) {
  this->ComputeFastMarching();
}
void ShapeDetectionLevelSetGUI::cb_Fast(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_Fast_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_fastMarchingResultButton_i(fltk::LightButton*, void*) {
  this->ShowFastMarchingResultImage();
}
void ShapeDetectionLevelSetGUI::cb_fastMarchingResultButton(fltk::LightButton* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_fastMarchingResultButton_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_sigmoidBetaValueInput_i(Fl_Value_Input* o, void*) {
  m_SigmoidFilter->SetBeta( o->value() );
}
void ShapeDetectionLevelSetGUI::cb_sigmoidBetaValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_sigmoidBetaValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_sigmoidAlphaValueInput_i(Fl_Value_Input* o, void*) {
  m_SigmoidFilter->SetAlpha( o->value() );
}
void ShapeDetectionLevelSetGUI::cb_sigmoidAlphaValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_sigmoidAlphaValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_shapeDetectionIterationsValueInput_i(Fl_Value_Input* o, void*) {
  m_ShapeDetectionFilter->SetNumberOfIterations( static_cast<unsigned int>( o->value() ) );
}
void ShapeDetectionLevelSetGUI::cb_shapeDetectionIterationsValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_shapeDetectionIterationsValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_fastMarchingStoppingValueInput_i(Fl_Value_Input* o, void*) {
  m_FastMarchingFilter->SetStoppingValue( o->value() );
}
void ShapeDetectionLevelSetGUI::cb_fastMarchingStoppingValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_fastMarchingStoppingValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_shapeDetectionRMSErrorValueInput_i(Fl_Value_Input* o, void*) {
  m_ShapeDetectionFilter->SetMaximumRMSError( o->value() );
}
void ShapeDetectionLevelSetGUI::cb_shapeDetectionRMSErrorValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_shapeDetectionRMSErrorValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_shapeDetectionCurvatureScalingValueInput_i(Fl_Value_Input* o, void*) {
  m_ShapeDetectionFilter->SetCurvatureScaling( o->value() );
}
void ShapeDetectionLevelSetGUI::cb_shapeDetectionCurvatureScalingValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_shapeDetectionCurvatureScalingValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_shapeDetectionPropagationScalingValueInput_i(Fl_Value_Input* o, void*) {
  m_ShapeDetectionFilter->SetPropagationScaling( o->value() );
}
void ShapeDetectionLevelSetGUI::cb_shapeDetectionPropagationScalingValueInput(Fl_Value_Input* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->parent()->user_data()))->cb_shapeDetectionPropagationScalingValueInput_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Quit_i(Fl_Button*, void*) {
  this->Quit();
}
void ShapeDetectionLevelSetGUI::cb_Quit(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Load_i(Fl_Button*, void*) {
  this->Load();
}
void ShapeDetectionLevelSetGUI::cb_Load(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void ShapeDetectionLevelSetGUI::cb_Save_i(Fl_Button*, void*) {
  this->SaveOutputImage();
}
void ShapeDetectionLevelSetGUI::cb_Save(Fl_Button* o, void* v) {
  ((ShapeDetectionLevelSetGUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

ShapeDetectionLevelSetGUI::ShapeDetectionLevelSetGUI() {
  { consoleWindow = new Fl_Double_Window(795, 305, "Shape Detection Segmentation Level Set");
    consoleWindow->user_data((void*)(this));
    { Connectors = new Fl_Group(0, 0, 820, 245);
      { Fl_Box* o = new Fl_Box(645, 55, 45, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(230, 80, 10, 55);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(200, 78, 80, 11);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(645, 100, 45, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(510, 80, 10, 55);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(645, 55, 10, 55);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(470, 79, 80, 11);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(68, 80, 80, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(590, 79, 65, 11);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(415, 80, 10, 120);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(380, 190, 10, 40);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(65, 190, 360, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(360, 80, 10, 55);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(65, 45, 10, 155);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(325, 79, 80, 11);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(445, 80, 10, 120);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(630, 84, 10, 51);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      Connectors->end();
    } // Fl_Group* Connectors
    { controlsGroup = new Fl_Group(0, 5, 785, 240);
      controlsGroup->color((Fl_Color)4);
      controlsGroup->deactivate();
      { inputImageButton = new fltk::LightButton(35, 132, 70, 25, "Display");
        inputImageButton->type(0);
        inputImageButton->box(FL_UP_BOX);
        inputImageButton->value(1);
        inputImageButton->color(FL_BACKGROUND_COLOR);
        inputImageButton->selection_color((Fl_Color)1);
        inputImageButton->labeltype(FL_NORMAL_LABEL);
        inputImageButton->labelfont(0);
        inputImageButton->labelsize(12);
        inputImageButton->labelcolor(FL_FOREGROUND_COLOR);
        inputImageButton->callback((Fl_Callback*)cb_inputImageButton);
        inputImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        inputImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* inputImageButton
      { Fl_Button* o = new Fl_Button(381, 66, 117, 34, "Shape Detection");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Shape);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { thresholdedImageButton = new fltk::LightButton(675, 45, 90, 30, "Display");
        thresholdedImageButton->type(0);
        thresholdedImageButton->box(FL_UP_BOX);
        thresholdedImageButton->value(1);
        thresholdedImageButton->color(FL_BACKGROUND_COLOR);
        thresholdedImageButton->selection_color((Fl_Color)1);
        thresholdedImageButton->labeltype(FL_NORMAL_LABEL);
        thresholdedImageButton->labelfont(0);
        thresholdedImageButton->labelsize(12);
        thresholdedImageButton->labelcolor(FL_FOREGROUND_COLOR);
        thresholdedImageButton->callback((Fl_Callback*)cb_thresholdedImageButton);
        thresholdedImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        thresholdedImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* thresholdedImageButton
      { thresholdedImageVTKButton = new fltk::LightButton(675, 90, 90, 25, "VTK Render");
        thresholdedImageVTKButton->type(0);
        thresholdedImageVTKButton->box(FL_UP_BOX);
        thresholdedImageVTKButton->value(1);
        thresholdedImageVTKButton->color(FL_BACKGROUND_COLOR);
        thresholdedImageVTKButton->selection_color((Fl_Color)1);
        thresholdedImageVTKButton->labeltype(FL_NORMAL_LABEL);
        thresholdedImageVTKButton->labelfont(0);
        thresholdedImageVTKButton->labelsize(12);
        thresholdedImageVTKButton->labelcolor(FL_FOREGROUND_COLOR);
        thresholdedImageVTKButton->callback((Fl_Callback*)cb_thresholdedImageVTKButton);
        thresholdedImageVTKButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        thresholdedImageVTKButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* thresholdedImageVTKButton
      { Fl_Button* o = new Fl_Button(535, 66, 87, 34, "Threshold");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Threshold);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { outputLevelSetButton = new fltk::LightButton(500, 115, 80, 24, "Level Set");
        outputLevelSetButton->type(0);
        outputLevelSetButton->box(FL_UP_BOX);
        outputLevelSetButton->value(1);
        outputLevelSetButton->color(FL_BACKGROUND_COLOR);
        outputLevelSetButton->selection_color((Fl_Color)1);
        outputLevelSetButton->labeltype(FL_NORMAL_LABEL);
        outputLevelSetButton->labelfont(0);
        outputLevelSetButton->labelsize(12);
        outputLevelSetButton->labelcolor(FL_FOREGROUND_COLOR);
        outputLevelSetButton->callback((Fl_Callback*)cb_outputLevelSetButton);
        outputLevelSetButton->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        outputLevelSetButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* outputLevelSetButton
      { Fl_Button* o = new Fl_Button(112, 63, 103, 42, "Gradient Magnitude");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Gradient);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { gradientMagnitudeButton = new fltk::LightButton(205, 116, 65, 24, "Display");
        gradientMagnitudeButton->type(0);
        gradientMagnitudeButton->box(FL_UP_BOX);
        gradientMagnitudeButton->value(1);
        gradientMagnitudeButton->color(FL_BACKGROUND_COLOR);
        gradientMagnitudeButton->selection_color((Fl_Color)1);
        gradientMagnitudeButton->labeltype(FL_NORMAL_LABEL);
        gradientMagnitudeButton->labelfont(0);
        gradientMagnitudeButton->labelsize(12);
        gradientMagnitudeButton->labelcolor(FL_FOREGROUND_COLOR);
        gradientMagnitudeButton->callback((Fl_Callback*)cb_gradientMagnitudeButton);
        gradientMagnitudeButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        gradientMagnitudeButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* gradientMagnitudeButton
      { Fl_Button* o = new Fl_Button(257, 64, 95, 41, "Linear + Sigmoid");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Linear);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { edgePotentialButton = new fltk::LightButton(332, 115, 67, 25, "Display");
        edgePotentialButton->type(0);
        edgePotentialButton->box(FL_UP_BOX);
        edgePotentialButton->value(1);
        edgePotentialButton->color(FL_BACKGROUND_COLOR);
        edgePotentialButton->selection_color((Fl_Color)1);
        edgePotentialButton->labeltype(FL_NORMAL_LABEL);
        edgePotentialButton->labelfont(0);
        edgePotentialButton->labelsize(12);
        edgePotentialButton->labelcolor(FL_FOREGROUND_COLOR);
        edgePotentialButton->callback((Fl_Callback*)cb_edgePotentialButton);
        edgePotentialButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        edgePotentialButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* edgePotentialButton
      { sigmaValueInput = new Fl_Value_Input(162, 39, 35, 24, "Sigma");
        sigmaValueInput->labelsize(12);
        sigmaValueInput->maximum(50);
        sigmaValueInput->step(0.1);
        sigmaValueInput->value(1.2);
        sigmaValueInput->textsize(12);
        sigmaValueInput->callback((Fl_Callback*)cb_sigmaValueInput);
      } // Fl_Value_Input* sigmaValueInput
      { zeroSetValueInput = new Fl_Value_Input(261, 210, 39, 25, "Time Threshold");
        zeroSetValueInput->labelsize(12);
        zeroSetValueInput->maximum(100);
        zeroSetValueInput->step(0.1);
        zeroSetValueInput->value(5);
        zeroSetValueInput->textsize(12);
        zeroSetValueInput->callback((Fl_Callback*)cb_zeroSetValueInput);
      } // Fl_Value_Input* zeroSetValueInput
      { Fl_Button* o = new Fl_Button(105, 124, 55, 40, "Clear Seeds");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Clear);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(195, 178, 123, 33, "Fast Marching");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Fast);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { fastMarchingResultButton = new fltk::LightButton(355, 211, 65, 24, "Overlay");
        fastMarchingResultButton->type(0);
        fastMarchingResultButton->box(FL_UP_BOX);
        fastMarchingResultButton->value(1);
        fastMarchingResultButton->color(FL_BACKGROUND_COLOR);
        fastMarchingResultButton->selection_color((Fl_Color)1);
        fastMarchingResultButton->labeltype(FL_NORMAL_LABEL);
        fastMarchingResultButton->labelfont(0);
        fastMarchingResultButton->labelsize(12);
        fastMarchingResultButton->labelcolor(FL_FOREGROUND_COLOR);
        fastMarchingResultButton->callback((Fl_Callback*)cb_fastMarchingResultButton);
        fastMarchingResultButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        fastMarchingResultButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* fastMarchingResultButton
      { sigmoidBetaValueInput = new Fl_Value_Input(305, 42, 35, 22, "Beta");
        sigmoidBetaValueInput->labelsize(12);
        sigmoidBetaValueInput->maximum(50);
        sigmoidBetaValueInput->step(0.1);
        sigmoidBetaValueInput->value(5);
        sigmoidBetaValueInput->textsize(12);
        sigmoidBetaValueInput->callback((Fl_Callback*)cb_sigmoidBetaValueInput);
      } // Fl_Value_Input* sigmoidBetaValueInput
      { sigmoidAlphaValueInput = new Fl_Value_Input(305, 19, 35, 23, "Alpha");
        sigmoidAlphaValueInput->labelsize(12);
        sigmoidAlphaValueInput->minimum(-10);
        sigmoidAlphaValueInput->maximum(10);
        sigmoidAlphaValueInput->step(0.1);
        sigmoidAlphaValueInput->value(-1);
        sigmoidAlphaValueInput->textsize(12);
        sigmoidAlphaValueInput->callback((Fl_Callback*)cb_sigmoidAlphaValueInput);
      } // Fl_Value_Input* sigmoidAlphaValueInput
      { shapeDetectionIterationsValueInput = new Fl_Value_Input(455, 43, 39, 23, "Iterations");
        shapeDetectionIterationsValueInput->labelsize(12);
        shapeDetectionIterationsValueInput->maximum(5000);
        shapeDetectionIterationsValueInput->step(1);
        shapeDetectionIterationsValueInput->value(100);
        shapeDetectionIterationsValueInput->textsize(12);
        shapeDetectionIterationsValueInput->callback((Fl_Callback*)cb_shapeDetectionIterationsValueInput);
      } // Fl_Value_Input* shapeDetectionIterationsValueInput
      { fastMarchingStoppingValueInput = new Fl_Value_Input(262, 155, 39, 23, "Stopping Time");
        fastMarchingStoppingValueInput->labelsize(12);
        fastMarchingStoppingValueInput->maximum(100);
        fastMarchingStoppingValueInput->step(0.1);
        fastMarchingStoppingValueInput->value(10);
        fastMarchingStoppingValueInput->textsize(12);
        fastMarchingStoppingValueInput->callback((Fl_Callback*)cb_fastMarchingStoppingValueInput);
      } // Fl_Value_Input* fastMarchingStoppingValueInput
      { shapeDetectionRMSErrorValueInput = new Fl_Value_Input(455, 20, 39, 23, "RMS Error");
        shapeDetectionRMSErrorValueInput->labelsize(12);
        shapeDetectionRMSErrorValueInput->maximum(5);
        shapeDetectionRMSErrorValueInput->step(0.001);
        shapeDetectionRMSErrorValueInput->value(0.02);
        shapeDetectionRMSErrorValueInput->textsize(12);
        shapeDetectionRMSErrorValueInput->callback((Fl_Callback*)cb_shapeDetectionRMSErrorValueInput);
      } // Fl_Value_Input* shapeDetectionRMSErrorValueInput
      { shapeDetectionCurvatureScalingValueInput = new Fl_Value_Input(439, 160, 50, 23, "Curvature Scaling");
        shapeDetectionCurvatureScalingValueInput->labelsize(12);
        shapeDetectionCurvatureScalingValueInput->maximum(5);
        shapeDetectionCurvatureScalingValueInput->step(0.01);
        shapeDetectionCurvatureScalingValueInput->value(0.1);
        shapeDetectionCurvatureScalingValueInput->textsize(12);
        shapeDetectionCurvatureScalingValueInput->callback((Fl_Callback*)cb_shapeDetectionCurvatureScalingValueInput);
        shapeDetectionCurvatureScalingValueInput->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Value_Input* shapeDetectionCurvatureScalingValueInput
      { shapeDetectionPropagationScalingValueInput = new Fl_Value_Input(439, 183, 50, 23, "Propagation Scaling");
        shapeDetectionPropagationScalingValueInput->labelsize(12);
        shapeDetectionPropagationScalingValueInput->maximum(10);
        shapeDetectionPropagationScalingValueInput->step(0.1);
        shapeDetectionPropagationScalingValueInput->value(1);
        shapeDetectionPropagationScalingValueInput->textsize(12);
        shapeDetectionPropagationScalingValueInput->callback((Fl_Callback*)cb_shapeDetectionPropagationScalingValueInput);
        shapeDetectionPropagationScalingValueInput->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Value_Input* shapeDetectionPropagationScalingValueInput
      controlsGroup->end();
    } // Fl_Group* controlsGroup
    { progressSlider = new fltk::ProgressBar(5, 250, 780, 15);
      progressSlider->type(3);
      progressSlider->box(FL_DOWN_BOX);
      progressSlider->color(FL_BACKGROUND_COLOR);
      progressSlider->selection_color((Fl_Color)2);
      progressSlider->labeltype(FL_NORMAL_LABEL);
      progressSlider->labelfont(0);
      progressSlider->labelsize(14);
      progressSlider->labelcolor(FL_FOREGROUND_COLOR);
      progressSlider->align(Fl_Align(FL_ALIGN_BOTTOM));
      progressSlider->when(FL_WHEN_CHANGED);
    } // fltk::ProgressBar* progressSlider
    { statusTextOutput = new Fl_Output(5, 272, 780, 25);
    } // Fl_Output* statusTextOutput
    { Fl_Button* o = new Fl_Button(680, 185, 90, 35, "Quit");
      o->box(FL_ROUND_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Quit);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(30, 25, 81, 35, "Load");
      o->box(FL_ROUND_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Load);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(595, 135, 90, 35, "Save");
      o->box(FL_ROUNDED_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Save);
    } // Fl_Button* o
    consoleWindow->end();
  } // Fl_Double_Window* consoleWindow
}

ShapeDetectionLevelSetGUI::~ShapeDetectionLevelSetGUI() {
}

void ShapeDetectionLevelSetGUI::Quit( void ) {
}

void ShapeDetectionLevelSetGUI::Load( void ) {
}

void ShapeDetectionLevelSetGUI::ShowAbout( void ) {
}

void ShapeDetectionLevelSetGUI::ShowInputImage( void ) {
}

void ShapeDetectionLevelSetGUI::ShowConsole( void ) {
}

void ShapeDetectionLevelSetGUI::ShowThresholdedImage( void ) {
}

void ShapeDetectionLevelSetGUI::UpdateExtract() {
}

void ShapeDetectionLevelSetGUI::ShowThresholdedImageWithVTK( void ) {
}

void ShapeDetectionLevelSetGUI::ShowOutputLevelSet( void ) {
}

void ShapeDetectionLevelSetGUI::ShowGradientMagnitudeImage( void ) {
}

void ShapeDetectionLevelSetGUI::ShowEdgePotentialImage( void ) {
}

void ShapeDetectionLevelSetGUI::ShowFastMarchingResultImage( void ) {
}

void ShapeDetectionLevelSetGUI::SaveOutputImage() {
}
