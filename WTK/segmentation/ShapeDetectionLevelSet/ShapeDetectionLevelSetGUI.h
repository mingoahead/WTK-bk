// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef ShapeDetectionLevelSetGUI_h
#define ShapeDetectionLevelSetGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "ShapeDetectionLevelSetBase.h"
#include <fltkLightButton.h>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Input.H>
#include <fltkProgressBar.h>
#include <FL/Fl_Output.H>

class ShapeDetectionLevelSetGUI : public ShapeDetectionLevelSetBase {
public:
  ShapeDetectionLevelSetGUI();
  Fl_Double_Window *consoleWindow;
  Fl_Group *Connectors;
  Fl_Group *controlsGroup;
  fltk::LightButton *inputImageButton;
private:
  inline void cb_inputImageButton_i(fltk::LightButton*, void*);
  static void cb_inputImageButton(fltk::LightButton*, void*);
  inline void cb_Shape_i(Fl_Button*, void*);
  static void cb_Shape(Fl_Button*, void*);
public:
  fltk::LightButton *thresholdedImageButton;
private:
  inline void cb_thresholdedImageButton_i(fltk::LightButton*, void*);
  static void cb_thresholdedImageButton(fltk::LightButton*, void*);
public:
  fltk::LightButton *thresholdedImageVTKButton;
private:
  inline void cb_thresholdedImageVTKButton_i(fltk::LightButton*, void*);
  static void cb_thresholdedImageVTKButton(fltk::LightButton*, void*);
  inline void cb_Threshold_i(Fl_Button*, void*);
  static void cb_Threshold(Fl_Button*, void*);
public:
  fltk::LightButton *outputLevelSetButton;
private:
  inline void cb_outputLevelSetButton_i(fltk::LightButton*, void*);
  static void cb_outputLevelSetButton(fltk::LightButton*, void*);
  inline void cb_Gradient_i(Fl_Button*, void*);
  static void cb_Gradient(Fl_Button*, void*);
public:
  fltk::LightButton *gradientMagnitudeButton;
private:
  inline void cb_gradientMagnitudeButton_i(fltk::LightButton*, void*);
  static void cb_gradientMagnitudeButton(fltk::LightButton*, void*);
  inline void cb_Linear_i(Fl_Button*, void*);
  static void cb_Linear(Fl_Button*, void*);
public:
  fltk::LightButton *edgePotentialButton;
private:
  inline void cb_edgePotentialButton_i(fltk::LightButton*, void*);
  static void cb_edgePotentialButton(fltk::LightButton*, void*);
public:
  Fl_Value_Input *sigmaValueInput;
private:
  inline void cb_sigmaValueInput_i(Fl_Value_Input*, void*);
  static void cb_sigmaValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *zeroSetValueInput;
private:
  inline void cb_zeroSetValueInput_i(Fl_Value_Input*, void*);
  static void cb_zeroSetValueInput(Fl_Value_Input*, void*);
  inline void cb_Clear_i(Fl_Button*, void*);
  static void cb_Clear(Fl_Button*, void*);
  inline void cb_Fast_i(Fl_Button*, void*);
  static void cb_Fast(Fl_Button*, void*);
public:
  fltk::LightButton *fastMarchingResultButton;
private:
  inline void cb_fastMarchingResultButton_i(fltk::LightButton*, void*);
  static void cb_fastMarchingResultButton(fltk::LightButton*, void*);
public:
  Fl_Value_Input *sigmoidBetaValueInput;
private:
  inline void cb_sigmoidBetaValueInput_i(Fl_Value_Input*, void*);
  static void cb_sigmoidBetaValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *sigmoidAlphaValueInput;
private:
  inline void cb_sigmoidAlphaValueInput_i(Fl_Value_Input*, void*);
  static void cb_sigmoidAlphaValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *shapeDetectionIterationsValueInput;
private:
  inline void cb_shapeDetectionIterationsValueInput_i(Fl_Value_Input*, void*);
  static void cb_shapeDetectionIterationsValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *fastMarchingStoppingValueInput;
private:
  inline void cb_fastMarchingStoppingValueInput_i(Fl_Value_Input*, void*);
  static void cb_fastMarchingStoppingValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *shapeDetectionRMSErrorValueInput;
private:
  inline void cb_shapeDetectionRMSErrorValueInput_i(Fl_Value_Input*, void*);
  static void cb_shapeDetectionRMSErrorValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *shapeDetectionCurvatureScalingValueInput;
private:
  inline void cb_shapeDetectionCurvatureScalingValueInput_i(Fl_Value_Input*, void*);
  static void cb_shapeDetectionCurvatureScalingValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *shapeDetectionPropagationScalingValueInput;
private:
  inline void cb_shapeDetectionPropagationScalingValueInput_i(Fl_Value_Input*, void*);
  static void cb_shapeDetectionPropagationScalingValueInput(Fl_Value_Input*, void*);
public:
  fltk::ProgressBar *progressSlider;
  Fl_Output *statusTextOutput;
private:
  inline void cb_Quit_i(Fl_Button*, void*);
  static void cb_Quit(Fl_Button*, void*);
  inline void cb_Load_i(Fl_Button*, void*);
  static void cb_Load(Fl_Button*, void*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
public:
  virtual ~ShapeDetectionLevelSetGUI();
  virtual void Quit( void );
  virtual void Load( void );
  virtual void ShowAbout( void );
  virtual void ShowInputImage( void );
  virtual void ShowConsole( void );
  virtual void ShowThresholdedImage( void );
  virtual void UpdateExtract();
  virtual void ShowThresholdedImageWithVTK( void );
  virtual void ShowOutputLevelSet( void );
  virtual void ShowGradientMagnitudeImage( void );
  virtual void ShowEdgePotentialImage( void );
  virtual void ShowFastMarchingResultImage( void );
  virtual void SaveOutputImage();
};
#endif
