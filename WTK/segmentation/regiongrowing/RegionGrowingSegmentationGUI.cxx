// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "RegionGrowingSegmentationGUI.h"

void RegionGrowingSegmentationGUI::cb_inputImageButton_i(fltk::LightButton*, void*) {
  ShowInputImage();
}
void RegionGrowingSegmentationGUI::cb_inputImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_inputImageButton_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_thresholdConnectedImageButton_i(fltk::LightButton*, void*) {
  this->ShowConnectedThresholdImage();
}
void RegionGrowingSegmentationGUI::cb_thresholdConnectedImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_thresholdConnectedImageButton_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Connected_i(Fl_Button*, void*) {
  m_ConnectedThresholdImageFilter->Update();
}
void RegionGrowingSegmentationGUI::cb_Connected(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_Connected_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_lowerThresholdCounter_i(Fl_Counter* o, void*) {
  m_ConnectedThresholdImageFilter->SetLower( static_cast<InputPixelType>( o->value() ) );
}
void RegionGrowingSegmentationGUI::cb_lowerThresholdCounter(Fl_Counter* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_lowerThresholdCounter_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_upperThresholdCounter_i(Fl_Counter* o, void*) {
  m_ConnectedThresholdImageFilter->SetUpper( static_cast<InputPixelType>( o->value() ) );
}
void RegionGrowingSegmentationGUI::cb_upperThresholdCounter(Fl_Counter* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_upperThresholdCounter_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Curvature_i(Fl_Button*, void*) {
  m_CurvatureFlowImageFilter->Update();
}
void RegionGrowingSegmentationGUI::cb_Curvature(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_Curvature_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_homogeneousImageButton_i(fltk::LightButton*, void*) {
  ShowHomogeneousImage();
}
void RegionGrowingSegmentationGUI::cb_homogeneousImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_homogeneousImageButton_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Confidence_i(Fl_Button*, void*) {
  m_ConfidenceConnectedImageFilter->Update();
}
void RegionGrowingSegmentationGUI::cb_Confidence(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_Confidence_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_confidenceConnectedImageButton_i(fltk::LightButton*, void*) {
  this->ShowConfidenceConnectedImage();
}
void RegionGrowingSegmentationGUI::cb_confidenceConnectedImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_confidenceConnectedImageButton_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_curvatureFlowTimeStepValueInput_i(Fl_Value_Input* o, void*) {
  m_CurvatureFlowImageFilter->SetTimeStep( o->value() );
}
void RegionGrowingSegmentationGUI::cb_curvatureFlowTimeStepValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_curvatureFlowTimeStepValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_curvatureFlowIterationsValueInput_i(Fl_Value_Input* o, void*) {
  m_CurvatureFlowImageFilter->SetNumberOfIterations( static_cast<unsigned int>( o->value() ) );
}
void RegionGrowingSegmentationGUI::cb_curvatureFlowIterationsValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_curvatureFlowIterationsValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Gradient_i(Fl_Button*, void*) {
  m_GradientAnisotropicDiffusionImageFilter->Update();
}
void RegionGrowingSegmentationGUI::cb_Gradient(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_Gradient_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Curvature1_i(Fl_Button*, void*) {
  m_CurvatureAnisotropicDiffusionImageFilter->Update();
}
void RegionGrowingSegmentationGUI::cb_Curvature1(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_Curvature1_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_curvatureAnisotropicDiffusionTimeStepValueInput_i(Fl_Value_Input* o, void*) {
  m_CurvatureAnisotropicDiffusionImageFilter->SetTimeStep( o->value() );
}
void RegionGrowingSegmentationGUI::cb_curvatureAnisotropicDiffusionTimeStepValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_curvatureAnisotropicDiffusionTimeStepValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_gradientAnisotropicDiffusionTimeStepValueInput_i(Fl_Value_Input* o, void*) {
  m_GradientAnisotropicDiffusionImageFilter->SetTimeStep( o->value() );
}
void RegionGrowingSegmentationGUI::cb_gradientAnisotropicDiffusionTimeStepValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_gradientAnisotropicDiffusionTimeStepValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_gradientAnisotropicDiffusionIterationsValueInput_i(Fl_Value_Input* o, void*) {
  m_GradientAnisotropicDiffusionImageFilter->SetNumberOfIterations( static_cast<unsigned int>( o->value() ) );
}
void RegionGrowingSegmentationGUI::cb_gradientAnisotropicDiffusionIterationsValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_gradientAnisotropicDiffusionIterationsValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_curvatureAnisotropicDiffusionIterationsValueInput_i(Fl_Value_Input* o, void*) {
  m_CurvatureAnisotropicDiffusionImageFilter->SetNumberOfIterations( static_cast<unsigned int>( o->value() ) );
}
void RegionGrowingSegmentationGUI::cb_curvatureAnisotropicDiffusionIterationsValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_curvatureAnisotropicDiffusionIterationsValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_gradientAnisotropicDiffusionConductanceValueInput_i(Fl_Value_Input* o, void*) {
  m_GradientAnisotropicDiffusionImageFilter->SetConductanceParameter( o->value() );
}
void RegionGrowingSegmentationGUI::cb_gradientAnisotropicDiffusionConductanceValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_gradientAnisotropicDiffusionConductanceValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_curvatureAnisotropicDiffusionConductanceValueInput_i(Fl_Value_Input* o, void*) {
  m_CurvatureAnisotropicDiffusionImageFilter->SetConductanceParameter( o->value() );
}
void RegionGrowingSegmentationGUI::cb_curvatureAnisotropicDiffusionConductanceValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_curvatureAnisotropicDiffusionConductanceValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_curvatureFlowImageButton_i(fltk::LightButton*, void*) {
  this->ShowCurvatureFlowImage();
}
void RegionGrowingSegmentationGUI::cb_curvatureFlowImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_curvatureFlowImageButton_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_gradientAnisotropicDiffusionImageButton_i(fltk::LightButton*, void*) {
  this->ShowGradientAnisotropicDiffusionImage();
}
void RegionGrowingSegmentationGUI::cb_gradientAnisotropicDiffusionImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_gradientAnisotropicDiffusionImageButton_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_curvatureAnisotropicDiffusionImageButton_i(fltk::LightButton*, void*) {
  this->ShowCurvatureAnisotropicDiffusionImage();
}
void RegionGrowingSegmentationGUI::cb_curvatureAnisotropicDiffusionImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_curvatureAnisotropicDiffusionImageButton_i(o,v);
}

void RegionGrowingSegmentationGUI::cb__i(Fl_Check_Button*, void*) {
  this->SelectSmoothingFilter( 0 );
}
void RegionGrowingSegmentationGUI::cb_(Fl_Check_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void RegionGrowingSegmentationGUI::cb_1_i(Fl_Check_Button*, void*) {
  this->SelectSmoothingFilter( 1 );
}
void RegionGrowingSegmentationGUI::cb_1(Fl_Check_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_2_i(Fl_Check_Button*, void*) {
  this->SelectSmoothingFilter( 2 );
}
void RegionGrowingSegmentationGUI::cb_2(Fl_Check_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Extract_i(Fl_Button*, void*) {
  m_ExtractImageFilter->Update();
}
void RegionGrowingSegmentationGUI::cb_Extract(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_Extract_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_xStartValueInput_i(Fl_Value_Input*, void*) {
  this->UpdateExtract();
}
void RegionGrowingSegmentationGUI::cb_xStartValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb_xStartValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_yStartValueInput_i(Fl_Value_Input*, void*) {
  this->UpdateExtract();
}
void RegionGrowingSegmentationGUI::cb_yStartValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb_yStartValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_zStartValueInput_i(Fl_Value_Input*, void*) {
  this->UpdateExtract();
}
void RegionGrowingSegmentationGUI::cb_zStartValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb_zStartValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_xEndValueInput_i(Fl_Value_Input*, void*) {
  this->UpdateExtract();
}
void RegionGrowingSegmentationGUI::cb_xEndValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb_xEndValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_yEndValueInput_i(Fl_Value_Input*, void*) {
  this->UpdateExtract();
}
void RegionGrowingSegmentationGUI::cb_yEndValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb_yEndValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_zEndValueInput_i(Fl_Value_Input*, void*) {
  this->UpdateExtract();
}
void RegionGrowingSegmentationGUI::cb_zEndValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->parent()->user_data()))->cb_zEndValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_homogeneousImageVTKButton_i(fltk::LightButton*, void*) {
  ShowHomogeneousImageWithVTK();
}
void RegionGrowingSegmentationGUI::cb_homogeneousImageVTKButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_homogeneousImageVTKButton_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Save_i(Fl_Button*, void*) {
  this->WriteConnectedThresholdImage();
}
void RegionGrowingSegmentationGUI::cb_Save(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Save1_i(Fl_Button*, void*) {
  this->WriteConfidenceConnectedImage();
}
void RegionGrowingSegmentationGUI::cb_Save1(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->parent()->user_data()))->cb_Save1_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_multiplierValueInput_i(Fl_Value_Input* o, void*) {
  m_ConfidenceConnectedImageFilter->SetMultiplier( o->value() );
}
void RegionGrowingSegmentationGUI::cb_multiplierValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->user_data()))->cb_multiplierValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_iterationsConfidenceValueInput_i(Fl_Value_Input* o, void*) {
  m_ConfidenceConnectedImageFilter->SetNumberOfIterations( static_cast<unsigned int>( o->value() ) );
}
void RegionGrowingSegmentationGUI::cb_iterationsConfidenceValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->user_data()))->cb_iterationsConfidenceValueInput_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Quit_i(Fl_Button*, void*) {
  this->Quit();
}
void RegionGrowingSegmentationGUI::cb_Quit(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void RegionGrowingSegmentationGUI::cb_Load_i(Fl_Button*, void*) {
  this->LoadInputImage();
}
void RegionGrowingSegmentationGUI::cb_Load(Fl_Button* o, void* v) {
  ((RegionGrowingSegmentationGUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

RegionGrowingSegmentationGUI::RegionGrowingSegmentationGUI() {
  { consoleWindow = new Fl_Double_Window(895, 455, "Region Growing Segmentation");
    consoleWindow->user_data((void*)(this));
    { Connectors = new Fl_Group(0, 0, 895, 380);
      { Fl_Box* o = new Fl_Box(725, 89, 108, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(55, 40, 9, 105);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(575, 87, 68, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(575, 193, 69, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(573, 87, 9, 117);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(500, 147, 9, 48);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(520, 142, 60, 9);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(726, 193, 104, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(112, 36, 62, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(113, 142, 61, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(112, 276, 67, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(112, 36, 9, 249);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(71, 142, 74, 9);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(267, 36, 62, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(422, 141, 52, 9);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(268, 142, 61, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(267, 277, 67, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(422, 35, 9, 252);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(348, 36, 83, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(349, 142, 82, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(348, 277, 83, 10);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(55, 140, 9, 105);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(500, 287, 9, 23);
        o->box(FL_UP_BOX);
        o->color((Fl_Color)4);
      } // Fl_Box* o
      Connectors->end();
    } // Fl_Group* Connectors
    { controlsGroup = new Fl_Group(5, 5, 885, 390);
      controlsGroup->deactivate();
      { inputImageButton = new fltk::LightButton(17, 71, 84, 39, "Input Image");
        inputImageButton->type(0);
        inputImageButton->box(FL_UP_BOX);
        inputImageButton->value(1);
        inputImageButton->color(FL_BACKGROUND_COLOR);
        inputImageButton->selection_color((Fl_Color)1);
        inputImageButton->labeltype(FL_NORMAL_LABEL);
        inputImageButton->labelfont(0);
        inputImageButton->labelsize(12);
        inputImageButton->labelcolor(FL_FOREGROUND_COLOR);
        inputImageButton->callback((Fl_Callback*)cb_inputImageButton);
        inputImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        inputImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* inputImageButton
      { thresholdConnectedImageButton = new fltk::LightButton(786, 82, 70, 25, "Display");
        thresholdConnectedImageButton->type(0);
        thresholdConnectedImageButton->box(FL_UP_BOX);
        thresholdConnectedImageButton->value(1);
        thresholdConnectedImageButton->color(FL_BACKGROUND_COLOR);
        thresholdConnectedImageButton->selection_color((Fl_Color)1);
        thresholdConnectedImageButton->labeltype(FL_NORMAL_LABEL);
        thresholdConnectedImageButton->labelfont(0);
        thresholdConnectedImageButton->labelsize(12);
        thresholdConnectedImageButton->labelcolor(FL_FOREGROUND_COLOR);
        thresholdConnectedImageButton->callback((Fl_Callback*)cb_thresholdConnectedImageButton);
        thresholdConnectedImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        thresholdConnectedImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* thresholdConnectedImageButton
      { Fl_Button* o = new Fl_Button(605, 75, 170, 37, "Connected Threshold");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Connected);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { Fl_Counter* o = lowerThresholdCounter = new Fl_Counter(643, 112, 121, 25, "Lower");
        lowerThresholdCounter->labelsize(12);
        lowerThresholdCounter->minimum(0);
        lowerThresholdCounter->maximum(65535);
        lowerThresholdCounter->step(1);
        lowerThresholdCounter->value(100);
        lowerThresholdCounter->textsize(12);
        lowerThresholdCounter->callback((Fl_Callback*)cb_lowerThresholdCounter);
        lowerThresholdCounter->align(Fl_Align(FL_ALIGN_LEFT));
        o->lstep(10.0);
      } // Fl_Counter* lowerThresholdCounter
      { Fl_Counter* o = upperThresholdCounter = new Fl_Counter(643, 137, 121, 25, "Upper");
        upperThresholdCounter->labelsize(12);
        upperThresholdCounter->minimum(0);
        upperThresholdCounter->maximum(65535);
        upperThresholdCounter->step(1);
        upperThresholdCounter->value(200);
        upperThresholdCounter->textsize(12);
        upperThresholdCounter->callback((Fl_Callback*)cb_upperThresholdCounter);
        upperThresholdCounter->align(Fl_Align(FL_ALIGN_LEFT));
        o->lstep( 10.0 );
      } // Fl_Counter* upperThresholdCounter
      { seedGroup = new Fl_Group(453, 183, 95, 115, "Seed Point");
        seedGroup->box(FL_ENGRAVED_BOX);
        seedGroup->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
        { xSeedPointValueOutput = new Fl_Value_Output(481, 208, 55, 25, "X ");
          xSeedPointValueOutput->labelsize(12);
          xSeedPointValueOutput->step(0.01);
          xSeedPointValueOutput->textsize(12);
        } // Fl_Value_Output* xSeedPointValueOutput
        { ySeedPointValueOutput = new Fl_Value_Output(481, 235, 55, 25, "Y ");
          ySeedPointValueOutput->labelsize(12);
          ySeedPointValueOutput->step(0.01);
          ySeedPointValueOutput->textsize(12);
        } // Fl_Value_Output* ySeedPointValueOutput
        { zSeedPointValueOutput = new Fl_Value_Output(481, 262, 55, 25, "Z ");
          zSeedPointValueOutput->labelsize(12);
          zSeedPointValueOutput->step(0.01);
          zSeedPointValueOutput->textsize(12);
        } // Fl_Value_Output* zSeedPointValueOutput
        seedGroup->end();
      } // Fl_Group* seedGroup
      { Fl_Button* o = new Fl_Button(140, 23, 165, 37, "Curvature Flow");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Curvature);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { homogeneousImageButton = new fltk::LightButton(440, 126, 118, 40, "Homogeneous Image");
        homogeneousImageButton->type(0);
        homogeneousImageButton->box(FL_UP_BOX);
        homogeneousImageButton->value(1);
        homogeneousImageButton->color(FL_BACKGROUND_COLOR);
        homogeneousImageButton->selection_color((Fl_Color)1);
        homogeneousImageButton->labeltype(FL_NORMAL_LABEL);
        homogeneousImageButton->labelfont(0);
        homogeneousImageButton->labelsize(12);
        homogeneousImageButton->labelcolor(FL_FOREGROUND_COLOR);
        homogeneousImageButton->callback((Fl_Callback*)cb_homogeneousImageButton);
        homogeneousImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        homogeneousImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* homogeneousImageButton
      { Fl_Button* o = new Fl_Button(605, 180, 170, 37, "Confidence Connected");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Confidence);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { confidenceConnectedImageButton = new fltk::LightButton(787, 186, 70, 25, "Display");
        confidenceConnectedImageButton->type(0);
        confidenceConnectedImageButton->box(FL_UP_BOX);
        confidenceConnectedImageButton->value(1);
        confidenceConnectedImageButton->color(FL_BACKGROUND_COLOR);
        confidenceConnectedImageButton->selection_color((Fl_Color)1);
        confidenceConnectedImageButton->labeltype(FL_NORMAL_LABEL);
        confidenceConnectedImageButton->labelfont(0);
        confidenceConnectedImageButton->labelsize(12);
        confidenceConnectedImageButton->labelcolor(FL_FOREGROUND_COLOR);
        confidenceConnectedImageButton->callback((Fl_Callback*)cb_confidenceConnectedImageButton);
        confidenceConnectedImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        confidenceConnectedImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* confidenceConnectedImageButton
      { curvatureFlowTimeStepValueInput = new Fl_Value_Input(234, 59, 55, 25, "TimeStep");
        curvatureFlowTimeStepValueInput->labelsize(12);
        curvatureFlowTimeStepValueInput->maximum(10);
        curvatureFlowTimeStepValueInput->value(0.125);
        curvatureFlowTimeStepValueInput->textsize(12);
        curvatureFlowTimeStepValueInput->callback((Fl_Callback*)cb_curvatureFlowTimeStepValueInput);
      } // Fl_Value_Input* curvatureFlowTimeStepValueInput
      { curvatureFlowIterationsValueInput = new Fl_Value_Input(234, 84, 55, 25, "Iterations");
        curvatureFlowIterationsValueInput->labelsize(12);
        curvatureFlowIterationsValueInput->minimum(1);
        curvatureFlowIterationsValueInput->maximum(100);
        curvatureFlowIterationsValueInput->value(1);
        curvatureFlowIterationsValueInput->textsize(12);
        curvatureFlowIterationsValueInput->callback((Fl_Callback*)cb_curvatureFlowIterationsValueInput);
      } // Fl_Value_Input* curvatureFlowIterationsValueInput
      { Fl_Button* o = new Fl_Button(139, 127, 167, 44, "Gradient Anisotropic Diffusion");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Gradient);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(138, 260, 166, 44, "Curvature Anisotropic Diffusion");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Curvature1);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { curvatureAnisotropicDiffusionTimeStepValueInput = new Fl_Value_Input(232, 304, 55, 25, "TimeStep");
        curvatureAnisotropicDiffusionTimeStepValueInput->labelsize(12);
        curvatureAnisotropicDiffusionTimeStepValueInput->maximum(10);
        curvatureAnisotropicDiffusionTimeStepValueInput->value(0.125);
        curvatureAnisotropicDiffusionTimeStepValueInput->textsize(12);
        curvatureAnisotropicDiffusionTimeStepValueInput->callback((Fl_Callback*)cb_curvatureAnisotropicDiffusionTimeStepValueInput);
      } // Fl_Value_Input* curvatureAnisotropicDiffusionTimeStepValueInput
      { gradientAnisotropicDiffusionTimeStepValueInput = new Fl_Value_Input(237, 171, 55, 25, "TimeStep");
        gradientAnisotropicDiffusionTimeStepValueInput->labelsize(12);
        gradientAnisotropicDiffusionTimeStepValueInput->maximum(10);
        gradientAnisotropicDiffusionTimeStepValueInput->value(0.125);
        gradientAnisotropicDiffusionTimeStepValueInput->textsize(12);
        gradientAnisotropicDiffusionTimeStepValueInput->callback((Fl_Callback*)cb_gradientAnisotropicDiffusionTimeStepValueInput);
      } // Fl_Value_Input* gradientAnisotropicDiffusionTimeStepValueInput
      { gradientAnisotropicDiffusionIterationsValueInput = new Fl_Value_Input(237, 196, 55, 25, "Iterations");
        gradientAnisotropicDiffusionIterationsValueInput->labelsize(12);
        gradientAnisotropicDiffusionIterationsValueInput->minimum(1);
        gradientAnisotropicDiffusionIterationsValueInput->maximum(100);
        gradientAnisotropicDiffusionIterationsValueInput->value(1);
        gradientAnisotropicDiffusionIterationsValueInput->textsize(12);
        gradientAnisotropicDiffusionIterationsValueInput->callback((Fl_Callback*)cb_gradientAnisotropicDiffusionIterationsValueInput);
      } // Fl_Value_Input* gradientAnisotropicDiffusionIterationsValueInput
      { curvatureAnisotropicDiffusionIterationsValueInput = new Fl_Value_Input(232, 329, 55, 25, "Iterations");
        curvatureAnisotropicDiffusionIterationsValueInput->labelsize(12);
        curvatureAnisotropicDiffusionIterationsValueInput->minimum(1);
        curvatureAnisotropicDiffusionIterationsValueInput->maximum(100);
        curvatureAnisotropicDiffusionIterationsValueInput->value(1);
        curvatureAnisotropicDiffusionIterationsValueInput->textsize(12);
        curvatureAnisotropicDiffusionIterationsValueInput->callback((Fl_Callback*)cb_curvatureAnisotropicDiffusionIterationsValueInput);
      } // Fl_Value_Input* curvatureAnisotropicDiffusionIterationsValueInput
      { gradientAnisotropicDiffusionConductanceValueInput = new Fl_Value_Input(237, 221, 55, 25, "Conductance");
        gradientAnisotropicDiffusionConductanceValueInput->labelsize(12);
        gradientAnisotropicDiffusionConductanceValueInput->maximum(10);
        gradientAnisotropicDiffusionConductanceValueInput->step(0.01);
        gradientAnisotropicDiffusionConductanceValueInput->value(3);
        gradientAnisotropicDiffusionConductanceValueInput->textsize(12);
        gradientAnisotropicDiffusionConductanceValueInput->callback((Fl_Callback*)cb_gradientAnisotropicDiffusionConductanceValueInput);
      } // Fl_Value_Input* gradientAnisotropicDiffusionConductanceValueInput
      { curvatureAnisotropicDiffusionConductanceValueInput = new Fl_Value_Input(232, 354, 55, 25, "Conductance");
        curvatureAnisotropicDiffusionConductanceValueInput->labelsize(12);
        curvatureAnisotropicDiffusionConductanceValueInput->maximum(10);
        curvatureAnisotropicDiffusionConductanceValueInput->step(0.01);
        curvatureAnisotropicDiffusionConductanceValueInput->value(3);
        curvatureAnisotropicDiffusionConductanceValueInput->textsize(12);
        curvatureAnisotropicDiffusionConductanceValueInput->callback((Fl_Callback*)cb_curvatureAnisotropicDiffusionConductanceValueInput);
      } // Fl_Value_Input* curvatureAnisotropicDiffusionConductanceValueInput
      { curvatureFlowImageButton = new fltk::LightButton(317, 29, 68, 24, "Display");
        curvatureFlowImageButton->type(0);
        curvatureFlowImageButton->box(FL_UP_BOX);
        curvatureFlowImageButton->value(1);
        curvatureFlowImageButton->color(FL_BACKGROUND_COLOR);
        curvatureFlowImageButton->selection_color((Fl_Color)1);
        curvatureFlowImageButton->labeltype(FL_NORMAL_LABEL);
        curvatureFlowImageButton->labelfont(0);
        curvatureFlowImageButton->labelsize(12);
        curvatureFlowImageButton->labelcolor(FL_FOREGROUND_COLOR);
        curvatureFlowImageButton->callback((Fl_Callback*)cb_curvatureFlowImageButton);
        curvatureFlowImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        curvatureFlowImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* curvatureFlowImageButton
      { gradientAnisotropicDiffusionImageButton = new fltk::LightButton(314, 136, 68, 24, "Display");
        gradientAnisotropicDiffusionImageButton->type(0);
        gradientAnisotropicDiffusionImageButton->box(FL_UP_BOX);
        gradientAnisotropicDiffusionImageButton->value(1);
        gradientAnisotropicDiffusionImageButton->color(FL_BACKGROUND_COLOR);
        gradientAnisotropicDiffusionImageButton->selection_color((Fl_Color)1);
        gradientAnisotropicDiffusionImageButton->labeltype(FL_NORMAL_LABEL);
        gradientAnisotropicDiffusionImageButton->labelfont(0);
        gradientAnisotropicDiffusionImageButton->labelsize(12);
        gradientAnisotropicDiffusionImageButton->labelcolor(FL_FOREGROUND_COLOR);
        gradientAnisotropicDiffusionImageButton->callback((Fl_Callback*)cb_gradientAnisotropicDiffusionImageButton);
        gradientAnisotropicDiffusionImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        gradientAnisotropicDiffusionImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* gradientAnisotropicDiffusionImageButton
      { curvatureAnisotropicDiffusionImageButton = new fltk::LightButton(314, 271, 68, 24, "Display");
        curvatureAnisotropicDiffusionImageButton->type(0);
        curvatureAnisotropicDiffusionImageButton->box(FL_UP_BOX);
        curvatureAnisotropicDiffusionImageButton->value(1);
        curvatureAnisotropicDiffusionImageButton->color(FL_BACKGROUND_COLOR);
        curvatureAnisotropicDiffusionImageButton->selection_color((Fl_Color)1);
        curvatureAnisotropicDiffusionImageButton->labeltype(FL_NORMAL_LABEL);
        curvatureAnisotropicDiffusionImageButton->labelfont(0);
        curvatureAnisotropicDiffusionImageButton->labelsize(12);
        curvatureAnisotropicDiffusionImageButton->labelcolor(FL_FOREGROUND_COLOR);
        curvatureAnisotropicDiffusionImageButton->callback((Fl_Callback*)cb_curvatureAnisotropicDiffusionImageButton);
        curvatureAnisotropicDiffusionImageButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        curvatureAnisotropicDiffusionImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* curvatureAnisotropicDiffusionImageButton
      { homogenizerGroup = new Fl_Group(390, 20, 50, 285);
        { Fl_Check_Button* o = new Fl_Check_Button(394, 28, 26, 26);
          o->type(102);
          o->down_box(FL_DIAMOND_DOWN_BOX);
          o->value(1);
          o->selection_color((Fl_Color)2);
          o->callback((Fl_Callback*)cb_);
        } // Fl_Check_Button* o
        { Fl_Check_Button* o = new Fl_Check_Button(390, 134, 26, 26);
          o->type(102);
          o->down_box(FL_DIAMOND_DOWN_BOX);
          o->selection_color((Fl_Color)2);
          o->callback((Fl_Callback*)cb_1);
        } // Fl_Check_Button* o
        { Fl_Check_Button* o = new Fl_Check_Button(393, 269, 26, 26);
          o->type(102);
          o->down_box(FL_DIAMOND_DOWN_BOX);
          o->selection_color((Fl_Color)2);
          o->callback((Fl_Callback*)cb_2);
        } // Fl_Check_Button* o
        homogenizerGroup->end();
      } // Fl_Group* homogenizerGroup
      { Fl_Button* o = new Fl_Button(17, 128, 83, 37, "Extract");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Extract);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { Fl_Group* o = new Fl_Group(13, 197, 90, 175, "Region");
        o->box(FL_ENGRAVED_BOX);
        o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
        { xStartValueInput = new Fl_Value_Input(43, 220, 45, 21, "X ");
          xStartValueInput->labelsize(12);
          xStartValueInput->textsize(12);
          xStartValueInput->callback((Fl_Callback*)cb_xStartValueInput);
        } // Fl_Value_Input* xStartValueInput
        { yStartValueInput = new Fl_Value_Input(43, 242, 45, 21, "Y ");
          yStartValueInput->labelsize(12);
          yStartValueInput->textsize(12);
          yStartValueInput->callback((Fl_Callback*)cb_yStartValueInput);
        } // Fl_Value_Input* yStartValueInput
        { zStartValueInput = new Fl_Value_Input(43, 264, 45, 21, "Z ");
          zStartValueInput->labelsize(12);
          zStartValueInput->textsize(12);
          zStartValueInput->callback((Fl_Callback*)cb_zStartValueInput);
        } // Fl_Value_Input* zStartValueInput
        { xEndValueInput = new Fl_Value_Input(43, 296, 45, 21, "X ");
          xEndValueInput->labelsize(12);
          xEndValueInput->textsize(12);
          xEndValueInput->callback((Fl_Callback*)cb_xEndValueInput);
        } // Fl_Value_Input* xEndValueInput
        { yEndValueInput = new Fl_Value_Input(43, 318, 45, 21, "Y ");
          yEndValueInput->labelsize(12);
          yEndValueInput->textsize(12);
          yEndValueInput->callback((Fl_Callback*)cb_yEndValueInput);
        } // Fl_Value_Input* yEndValueInput
        { zEndValueInput = new Fl_Value_Input(43, 341, 45, 21, "Z ");
          zEndValueInput->labelsize(12);
          zEndValueInput->textsize(12);
          zEndValueInput->callback((Fl_Callback*)cb_zEndValueInput);
        } // Fl_Value_Input* zEndValueInput
        o->end();
      } // Fl_Group* o
      { homogeneousImageVTKButton = new fltk::LightButton(455, 320, 90, 40, "VTK Render");
        homogeneousImageVTKButton->type(0);
        homogeneousImageVTKButton->box(FL_UP_BOX);
        homogeneousImageVTKButton->value(1);
        homogeneousImageVTKButton->color(FL_BACKGROUND_COLOR);
        homogeneousImageVTKButton->selection_color((Fl_Color)1);
        homogeneousImageVTKButton->labeltype(FL_NORMAL_LABEL);
        homogeneousImageVTKButton->labelfont(0);
        homogeneousImageVTKButton->labelsize(12);
        homogeneousImageVTKButton->labelcolor(FL_FOREGROUND_COLOR);
        homogeneousImageVTKButton->callback((Fl_Callback*)cb_homogeneousImageVTKButton);
        homogeneousImageVTKButton->align(Fl_Align(132|FL_ALIGN_INSIDE));
        homogeneousImageVTKButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* homogeneousImageVTKButton
      { Fl_Button* o = new Fl_Button(788, 107, 65, 27, "Save");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Save);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(790, 211, 65, 27, "Save");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Save1);
      } // Fl_Button* o
      controlsGroup->end();
    } // Fl_Group* controlsGroup
    { progressSlider = new fltk::ProgressBar(10, 397, 870, 15);
      progressSlider->type(3);
      progressSlider->box(FL_DOWN_BOX);
      progressSlider->color(FL_BACKGROUND_COLOR);
      progressSlider->selection_color((Fl_Color)2);
      progressSlider->labeltype(FL_NORMAL_LABEL);
      progressSlider->labelfont(0);
      progressSlider->labelsize(14);
      progressSlider->labelcolor(FL_FOREGROUND_COLOR);
      progressSlider->align(Fl_Align(FL_ALIGN_BOTTOM));
      progressSlider->when(FL_WHEN_CHANGED);
    } // fltk::ProgressBar* progressSlider
    { statusTextOutput = new Fl_Output(10, 420, 870, 25);
    } // Fl_Output* statusTextOutput
    { multiplierValueInput = new Fl_Value_Input(697, 218, 55, 25, "Multiplier");
      multiplierValueInput->labelsize(12);
      multiplierValueInput->minimum(1);
      multiplierValueInput->maximum(100);
      multiplierValueInput->value(2.5);
      multiplierValueInput->textsize(12);
      multiplierValueInput->callback((Fl_Callback*)cb_multiplierValueInput);
    } // Fl_Value_Input* multiplierValueInput
    { iterationsConfidenceValueInput = new Fl_Value_Input(697, 244, 55, 25, "Iterations");
      iterationsConfidenceValueInput->labelsize(12);
      iterationsConfidenceValueInput->minimum(1);
      iterationsConfidenceValueInput->maximum(100);
      iterationsConfidenceValueInput->value(2);
      iterationsConfidenceValueInput->textsize(12);
      iterationsConfidenceValueInput->callback((Fl_Callback*)cb_iterationsConfidenceValueInput);
    } // Fl_Value_Input* iterationsConfidenceValueInput
    { Fl_Button* o = new Fl_Button(693, 332, 90, 35, "Quit");
      o->box(FL_ROUND_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Quit);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(20, 20, 81, 35, "Load");
      o->box(FL_ROUND_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Load);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    consoleWindow->end();
  } // Fl_Double_Window* consoleWindow
}

RegionGrowingSegmentationGUI::~RegionGrowingSegmentationGUI() {
}

void RegionGrowingSegmentationGUI::Quit( void ) {
}

void RegionGrowingSegmentationGUI::Load( void ) {
}

void RegionGrowingSegmentationGUI::ShowAbout( void ) {
}

void RegionGrowingSegmentationGUI::ShowInputImage( void ) {
}

void RegionGrowingSegmentationGUI::ShowConnectedThresholdImage( void ) {
}

void RegionGrowingSegmentationGUI::ShowConsole( void ) {
}

void RegionGrowingSegmentationGUI::ShowHomogeneousImage( void ) {
}

void RegionGrowingSegmentationGUI::ShowConfidenceConnectedImage( void ) {
}

void RegionGrowingSegmentationGUI::ShowCurvatureFlowImage( void ) {
}

void RegionGrowingSegmentationGUI::ShowCurvatureAnisotropicDiffusionImage( void ) {
}

void RegionGrowingSegmentationGUI::ShowGradientAnisotropicDiffusionImage( void ) {
}

void RegionGrowingSegmentationGUI::UpdateExtract() {
}

void RegionGrowingSegmentationGUI::ShowHomogeneousImageWithVTK( void ) {
}
