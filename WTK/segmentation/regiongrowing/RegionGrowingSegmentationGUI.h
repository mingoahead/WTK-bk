// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef RegionGrowingSegmentationGUI_h
#define RegionGrowingSegmentationGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "RegionGrowingSegmentationBase.h"
//#include <RegionGrowingSegmentationBase.h>
#include <fltkLightButton.h>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Check_Button.H>
#include <fltkProgressBar.h>
#include <FL/Fl_Output.H>

class RegionGrowingSegmentationGUI : public RegionGrowingSegmentationBase {
public:
  RegionGrowingSegmentationGUI();
  Fl_Double_Window *consoleWindow;
  Fl_Group *Connectors;
  Fl_Group *controlsGroup;
  fltk::LightButton *inputImageButton;
private:
  inline void cb_inputImageButton_i(fltk::LightButton*, void*);
  static void cb_inputImageButton(fltk::LightButton*, void*);
public:
  fltk::LightButton *thresholdConnectedImageButton;
private:
  inline void cb_thresholdConnectedImageButton_i(fltk::LightButton*, void*);
  static void cb_thresholdConnectedImageButton(fltk::LightButton*, void*);
  inline void cb_Connected_i(Fl_Button*, void*);
  static void cb_Connected(Fl_Button*, void*);
public:
  Fl_Counter *lowerThresholdCounter;
private:
  inline void cb_lowerThresholdCounter_i(Fl_Counter*, void*);
  static void cb_lowerThresholdCounter(Fl_Counter*, void*);
public:
  Fl_Counter *upperThresholdCounter;
private:
  inline void cb_upperThresholdCounter_i(Fl_Counter*, void*);
  static void cb_upperThresholdCounter(Fl_Counter*, void*);
public:
  Fl_Group *seedGroup;
  Fl_Value_Output *xSeedPointValueOutput;
  Fl_Value_Output *ySeedPointValueOutput;
  Fl_Value_Output *zSeedPointValueOutput;
private:
  inline void cb_Curvature_i(Fl_Button*, void*);
  static void cb_Curvature(Fl_Button*, void*);
public:
  fltk::LightButton *homogeneousImageButton;
private:
  inline void cb_homogeneousImageButton_i(fltk::LightButton*, void*);
  static void cb_homogeneousImageButton(fltk::LightButton*, void*);
  inline void cb_Confidence_i(Fl_Button*, void*);
  static void cb_Confidence(Fl_Button*, void*);
public:
  fltk::LightButton *confidenceConnectedImageButton;
private:
  inline void cb_confidenceConnectedImageButton_i(fltk::LightButton*, void*);
  static void cb_confidenceConnectedImageButton(fltk::LightButton*, void*);
public:
  Fl_Value_Input *curvatureFlowTimeStepValueInput;
private:
  inline void cb_curvatureFlowTimeStepValueInput_i(Fl_Value_Input*, void*);
  static void cb_curvatureFlowTimeStepValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *curvatureFlowIterationsValueInput;
private:
  inline void cb_curvatureFlowIterationsValueInput_i(Fl_Value_Input*, void*);
  static void cb_curvatureFlowIterationsValueInput(Fl_Value_Input*, void*);
  inline void cb_Gradient_i(Fl_Button*, void*);
  static void cb_Gradient(Fl_Button*, void*);
  inline void cb_Curvature1_i(Fl_Button*, void*);
  static void cb_Curvature1(Fl_Button*, void*);
public:
  Fl_Value_Input *curvatureAnisotropicDiffusionTimeStepValueInput;
private:
  inline void cb_curvatureAnisotropicDiffusionTimeStepValueInput_i(Fl_Value_Input*, void*);
  static void cb_curvatureAnisotropicDiffusionTimeStepValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *gradientAnisotropicDiffusionTimeStepValueInput;
private:
  inline void cb_gradientAnisotropicDiffusionTimeStepValueInput_i(Fl_Value_Input*, void*);
  static void cb_gradientAnisotropicDiffusionTimeStepValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *gradientAnisotropicDiffusionIterationsValueInput;
private:
  inline void cb_gradientAnisotropicDiffusionIterationsValueInput_i(Fl_Value_Input*, void*);
  static void cb_gradientAnisotropicDiffusionIterationsValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *curvatureAnisotropicDiffusionIterationsValueInput;
private:
  inline void cb_curvatureAnisotropicDiffusionIterationsValueInput_i(Fl_Value_Input*, void*);
  static void cb_curvatureAnisotropicDiffusionIterationsValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *gradientAnisotropicDiffusionConductanceValueInput;
private:
  inline void cb_gradientAnisotropicDiffusionConductanceValueInput_i(Fl_Value_Input*, void*);
  static void cb_gradientAnisotropicDiffusionConductanceValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *curvatureAnisotropicDiffusionConductanceValueInput;
private:
  inline void cb_curvatureAnisotropicDiffusionConductanceValueInput_i(Fl_Value_Input*, void*);
  static void cb_curvatureAnisotropicDiffusionConductanceValueInput(Fl_Value_Input*, void*);
public:
  fltk::LightButton *curvatureFlowImageButton;
private:
  inline void cb_curvatureFlowImageButton_i(fltk::LightButton*, void*);
  static void cb_curvatureFlowImageButton(fltk::LightButton*, void*);
public:
  fltk::LightButton *gradientAnisotropicDiffusionImageButton;
private:
  inline void cb_gradientAnisotropicDiffusionImageButton_i(fltk::LightButton*, void*);
  static void cb_gradientAnisotropicDiffusionImageButton(fltk::LightButton*, void*);
public:
  fltk::LightButton *curvatureAnisotropicDiffusionImageButton;
private:
  inline void cb_curvatureAnisotropicDiffusionImageButton_i(fltk::LightButton*, void*);
  static void cb_curvatureAnisotropicDiffusionImageButton(fltk::LightButton*, void*);
public:
  Fl_Group *homogenizerGroup;
private:
  inline void cb__i(Fl_Check_Button*, void*);
  static void cb_(Fl_Check_Button*, void*);
  inline void cb_1_i(Fl_Check_Button*, void*);
  static void cb_1(Fl_Check_Button*, void*);
  inline void cb_2_i(Fl_Check_Button*, void*);
  static void cb_2(Fl_Check_Button*, void*);
  inline void cb_Extract_i(Fl_Button*, void*);
  static void cb_Extract(Fl_Button*, void*);
public:
  Fl_Value_Input *xStartValueInput;
private:
  inline void cb_xStartValueInput_i(Fl_Value_Input*, void*);
  static void cb_xStartValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *yStartValueInput;
private:
  inline void cb_yStartValueInput_i(Fl_Value_Input*, void*);
  static void cb_yStartValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *zStartValueInput;
private:
  inline void cb_zStartValueInput_i(Fl_Value_Input*, void*);
  static void cb_zStartValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *xEndValueInput;
private:
  inline void cb_xEndValueInput_i(Fl_Value_Input*, void*);
  static void cb_xEndValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *yEndValueInput;
private:
  inline void cb_yEndValueInput_i(Fl_Value_Input*, void*);
  static void cb_yEndValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *zEndValueInput;
private:
  inline void cb_zEndValueInput_i(Fl_Value_Input*, void*);
  static void cb_zEndValueInput(Fl_Value_Input*, void*);
public:
  fltk::LightButton *homogeneousImageVTKButton;
private:
  inline void cb_homogeneousImageVTKButton_i(fltk::LightButton*, void*);
  static void cb_homogeneousImageVTKButton(fltk::LightButton*, void*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  inline void cb_Save1_i(Fl_Button*, void*);
  static void cb_Save1(Fl_Button*, void*);
public:
  fltk::ProgressBar *progressSlider;
  Fl_Output *statusTextOutput;
  Fl_Value_Input *multiplierValueInput;
private:
  inline void cb_multiplierValueInput_i(Fl_Value_Input*, void*);
  static void cb_multiplierValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *iterationsConfidenceValueInput;
private:
  inline void cb_iterationsConfidenceValueInput_i(Fl_Value_Input*, void*);
  static void cb_iterationsConfidenceValueInput(Fl_Value_Input*, void*);
  inline void cb_Quit_i(Fl_Button*, void*);
  static void cb_Quit(Fl_Button*, void*);
  inline void cb_Load_i(Fl_Button*, void*);
  static void cb_Load(Fl_Button*, void*);
public:
  virtual ~RegionGrowingSegmentationGUI();
  virtual void Quit( void );
  virtual void Load( void );
  virtual void ShowAbout( void );
  virtual void ShowInputImage( void );
  virtual void ShowConnectedThresholdImage( void );
  virtual void ShowConsole( void );
  virtual void ShowHomogeneousImage( void );
  virtual void ShowConfidenceConnectedImage( void );
  virtual void ShowCurvatureFlowImage( void );
  virtual void ShowCurvatureAnisotropicDiffusionImage( void );
  virtual void ShowGradientAnisotropicDiffusionImage( void );
  virtual void UpdateExtract();
  virtual void ShowHomogeneousImageWithVTK( void );
};
#endif
